<thing:thing-descriptions bindingId="modbus" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0 http://eclipse.org/smarthome/schemas/thing-description-1.0.0.xsd">
	<thing-type id="data">
		<supported-bridge-type-refs>
			<bridge-type-ref id="poller" />
			<bridge-type-ref id="tcp"/>
			<bridge-type-ref id="serial"/>
		</supported-bridge-type-refs>
		<label>Modbus data definition</label>
		<channels>
            <channel id="switch" typeId="switch-type" />
            <channel id="contact" typeId="contact-type" />
            <channel id="datetime" typeId="datetime-type" />
            <channel id="dimmer" typeId="dimmer-type" />
            <channel id="number" typeId="number-type" />
            <channel id="string" typeId="string-type" />
            <channel id="rollershutter" typeId="rollershutter-type" />
            <channel id="lastReadSuccess" typeId="last-successful-read-type" />
            <channel id="lastReadError" typeId="last-erroring-read-type" />
            <channel id="lastWriteSuccess" typeId="last-successful-write-type" />
            <channel id="lastWriteError" typeId="last-erroring-write-type" />
		</channels>
		<config-description>
            <!-- what to read -->
            <parameter name="readStart" type="text" pattern="^(0|[1-9][0-9]*(\.[0-9]{1,2})?)?$">
                <label>Read address</label>
                <description><![CDATA[Start address to start reading the value. 
                <br />Input as zero-based index number, e.g. in place of 400001 (first holding register), use the address 0.  Must be between (poller start) and (poller start + poller length - 1) (inclusive).
                <br />With registers and value type less than 16 bits, you can also use X.Y format where Y specifies the sub-element to read from the 16 bit register. For example, 3.1 would mean pick second bit from register index 3 with bit value type. 
                With int8 valuetype, it would pick the high byte of register index 3.
                ]]> 
                </description>
            </parameter>
            <parameter name="readTransform" type="text">
                <label>Read transform</label>
                <description>Transformation to apply to received commands and polled state.
    Use "default" to communicate that no transformation is done and value should be passed as is.
    Use SERVICENAME(ARG) to use transformation service.
    Any other value than the above types will be interpreted as static text, in which case the actual content of the polled 
         value is ignored.</description>
                <default>default</default>
            </parameter>
            <parameter name="readValueType" type="text">
                <label>Read value type</label>
                <description>How data is read from modbus. Only applicable to registers</description>
                <options>
                    <option value="float32">32bit floating point</option>
                    <option value="float32_swap">32bit floating point, 16bit words swapped</option>

                    <option value="int32">32bit signed integer</option>
                    <option value="uint32">32bit unsigned integer</option>
                    <option value="int32_swap">32bit signed integer, 16bit words swapped</option>
                    <option value="uint32_swap">32bit unsigned integer, 16bit words swapped</option>

                    <option value="int16">16bit signed integer</option>
                    <option value="uint16">16bit unsigned integer</option>

                    <option value="int8">8bit signed integer</option>
                    <option value="uint8">8bit unsigned integer</option>

                    <option value="bit">individual bit</option>
                </options>
            </parameter>
            
            
            
            <parameter name="writeStart" type="integer">
                <label>Write address</label>
                <description><![CDATA[Start address of the first holding register or coils in the write. 
                <br />Use zero based address, e.g. in place of 400001 (first holding register), use the address 0. This address is passed to data frame as is.]]></description>
                <default>0</default>
            </parameter>
            <parameter name="writeType" type="text">
                <label>Write type</label>
                <description>Type of data to write. Coil uses function code 5 or 15. Holding register uses function code 6 or 16. See "Use FC15/FC16" parameter.</description>
                <options>
                    <option value="coil">coil, or digital out (DO)</option>
                    <option value="holding">holding register</option>
                </options>
            </parameter>

            <parameter name="writeTransform" type="text">
                <label>Write transform</label>
                <description>Transformation to apply to received commands.
    Use "default" to communicate that no transformation is done and value should be passed as is.
    Use SERVICENAME(ARG) to use transformation service.
    Any other value than the above types will be interpreted as static text, in which case the actual content of the command 
         value is ignored.</description>
                <default>default</default>
            </parameter>
            <parameter name="writeValueType" type="text">
                <label>Write value type</label>
                <description>How data is written to modbus. Only applicable to registers.</description>
                <options>
                    <option value="float32">32bit floating point</option>
                    <option value="float32_swap">32bit floating point, 16bit words swapped</option>
                    <option value="int32">32bit integer, as two's complement</option>
                    <option value="int32_swap">32bit signed integer, as two's complement but with 16bit words swapped</option>
                    <option value="int16">16bit integer, as two's complement</option>
                </options>
            </parameter>
            
            <parameter name="writeMultipleEvenWithSingleRegisterOrCoil" type="boolean">
                <label>Use FC15/FC16</label>
                <default>false</default>
                <description>Whether single register / coil of data is written using FC16 ("Write Multiple Holding Registers") / FC15 ("Write Multiple Coils"), respectively. If false, FC6/FC5 are used with single register and single coil, respectively.</description>
            </parameter>
        </config-description>
	</thing-type>
</thing:thing-descriptions>